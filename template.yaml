AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Blog Management System - Lambda Functions with Alias

Parameters:
  Version:
    Type: String
    Default: "1.0.0"
    Description: The version number for this deployment

Globals:
  Function:
    Runtime: python3.11
    Tags:
      Version: !Ref Version
    Environment:
      Variables:
        VERSION: !Ref Version

Resources:
  # Lambda Layer for common utilities
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: blog-common-layer
      Description: Common utilities for blog Lambda functions
      ContentUri: ./layers/common-layer/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Retain

  # API Gateway - 기존 설정 유지
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod  # 고정값 사용
      EndpointConfiguration:
        Type: REGIONAL
      OpenApiVersion: '2.0'
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # 관리자 로그인 함수
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "BlogAuth"
      Handler: app.lambda_handler
      CodeUri: ./auth
      Timeout: 30
      MemorySize: 256
      Layers:
        - !Ref CommonLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:blog/config-*"
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/login
            Method: POST
        AuthOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/login
            Method: OPTIONS
        AuthTestApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/test
            Method: GET

  # 게시판 CRUD 함수
  BoardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "BlogBoard"
      Handler: app.lambda_handler
      CodeUri: ./board
      Timeout: 30
      MemorySize: 256
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          TABLE_NAME: "blog-table"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:blog/config-*"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/blog-table"
      Events:
        # 게시글 목록 조회 (공개)
        ListBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board
            Method: GET
        # 최근 게시글 5개 조회 (공개)
        RecentBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/recent
            Method: GET
        # 게시글 상세 조회 (공개)
        GetBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/{boardId}
            Method: GET
        # 게시글 생성 (관리자 전용)
        CreateBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board
            Method: POST
        # 게시글 수정 (관리자 전용)
        UpdateBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/{boardId}
            Method: PUT
        # 게시글 삭제 (관리자 전용)
        DeleteBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/{boardId}
            Method: DELETE
        # 이미지 업로드 (관리자 전용)
        UploadImageApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/upload
            Method: POST
        # CORS 옵션
        BoardOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board
            Method: OPTIONS
        BoardItemOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/{boardId}
            Method: OPTIONS
        UploadOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/upload
            Method: OPTIONS
        BoardTestApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/test
            Method: GET

Outputs:
  # Lambda Function Names (for CI/CD)
  AuthFunctionName:
    Description: "Auth Lambda Function Name"
    Value: !Ref AuthFunction

  BoardFunctionName:
    Description: "Board Lambda Function Name"
    Value: !Ref BoardFunction

  # API Gateway Information
  ApiGatewayId:
    Description: "API Gateway ID"
    Value: !Ref ApiGateway

  ApiGatewayURL:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  # API Endpoints
  AuthApiEndpoint:
    Description: "Auth API endpoint"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/login"

  BoardApiEndpoint:
    Description: "Board API endpoint"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/board"
