AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Blog Management System - Lambda Functions with Alias

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: The deployment stage (dev, prod)
    AllowedValues:
      - dev
      - prod

Globals:
  Function:
    Runtime: python3.11
    Tags:
      Environment: !Ref Stage
    Environment:
      Variables:
        STAGE: !Ref Stage
    AutoPublishAlias: !Ref Stage
    DeploymentPreference:
      Type: AllAtOnce

Resources:
  # API Gateway - 단일 API에 여러 Stage
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: REGIONAL
      OpenApiVersion: '2.0'
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Tags:
        Environment: !Ref Stage

  # 관리자 로그인 함수
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "BlogAuth"
      Handler: app.lambda_handler
      CodeUri: ./auth
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:blog/${Stage}/config-*"
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/login
            Method: POST
        AuthOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/login
            Method: OPTIONS

  # 게시판 CRUD 함수
  BoardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "BlogBoard"
      Handler: app.lambda_handler
      CodeUri: ./board
      Environment:
        Variables:
          TABLE_NAME: !Sub "blog-table-${Stage}"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:blog/${Stage}/config-*"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/blog-table-${Stage}"
      Events:
        # 게시글 목록 조회 (공개)
        ListBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board
            Method: GET
        # 게시글 상세 조회 (공개)
        GetBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/{boardId}
            Method: GET
        # 게시글 생성 (관리자 전용)
        CreateBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board
            Method: POST
        # 게시글 수정 (관리자 전용)
        UpdateBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/{boardId}
            Method: PUT
        # 게시글 삭제 (관리자 전용)
        DeleteBoardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/{boardId}
            Method: DELETE
        # 이미지 업로드 (관리자 전용)
        UploadImageApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/upload
            Method: POST
        # CORS 옵션
        BoardOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board
            Method: OPTIONS
        BoardItemOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/{boardId}
            Method: OPTIONS
        UploadOptionsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/upload
            Method: OPTIONS
        BoardTestApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /board/test
            Method: GET

Outputs:
  AuthFunction:
    Description: "Auth Lambda Function ARN"
    Value: !GetAtt AuthFunction.Arn

  AuthFunctionAlias:
    Description: "Auth Lambda Function Alias ARN"
    Value: !Ref AuthFunction.Alias

  BoardFunction:
    Description: "Board Lambda Function ARN"
    Value: !GetAtt BoardFunction.Arn

  BoardFunctionAlias:
    Description: "Board Lambda Function Alias ARN"
    Value: !Ref BoardFunction.Alias

  ApiGatewayId:
    Description: "API Gateway ID"
    Value: !Ref ApiGateway
    Export:
      Name: "BlogApiGatewayId"

  ApiGatewayURL:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: !Sub "BlogApiEndpoint-${Stage}"

  AuthApiEndpoint:
    Description: "Auth API endpoint"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/auth/login"

  BoardApiEndpoint:
    Description: "Board API endpoint"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/board"
